# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'videoscrape.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# yea it was edited

import pandas as pd
import json
import os
from datetime import datetime
from datetime import time
from PyQt5 import QtCore, QtGui, QtWidgets

with open("./info.json") as f:
    info = json.load(f)

firstTime = True
dlpCalledBefore = False
mostFrequentCounter = -1
frequentTime = None
avrgFreq = None

df = pd.read_csv("./working/frequency.csv")


for i in range(len(df["timestamp"])):
    df.at[i, "timestamp"] = datetime.strptime(df.at[i, "timestamp"], "%H:%M:%S")
    df.at[i, "timestamp"] = df.at[i, "timestamp"].time()

orderedDf = df.sort_values("averaged", ascending=False)
orderedDf = orderedDf.reset_index(drop=True)


def NextFrequentIncrement():
    global mostFrequentCounter
    global df
    global orderedDf
    global frequentTime
    global avrgFreq
    mostFrequentCounter += 1
    frequentTime = orderedDf["timestamp"][0]
    avrgFreq = orderedDf["averaged"][0]
    print(orderedDf)
    value = df[df["timestamp"] == frequentTime]
    indexNo = value.index[0]
    df = df.drop(df.index[indexNo - 10 : indexNo + 10])
    df = df.reset_index(drop=True)
    orderedDf = df.sort_values("averaged", ascending=False)
    orderedDf = orderedDf.reset_index(drop=True)
    # order is fuckd here


class Ui_MainWindow(object):
    def NextFrequent(self, MainWindow):
        global orderedDf
        global firstTime
        global dlpCalledBefore
        global mostFrequentCounter
        global frequentTime
        global avrgFreq
        # increment
        if firstTime is False:
            NextFrequentIncrement()
        else:
            firstTime is False
        if dlpCalledBefore is False:
            NextFrequentIncrement()
        else:
            dlpCalledBefore = False
        # display
        _translate = QtCore.QCoreApplication.translate
        self.label_number.setText(
            _translate("MainWindow", str(mostFrequentCounter + 1))
        )
        self.label_time.setText(
            _translate("MainWindow", frequentTime.strftime("%H:%M:%S"))
        )
        self.label_msg_nmb.setText(_translate("MainWindow", str(avrgFreq)))
        self.spinBox_start_hour.setValue(int(frequentTime.strftime("%H")))
        self.spinBox_start_minute.setValue(int(frequentTime.strftime("%M")))
        self.spinBox_start_second.setValue(int(frequentTime.strftime("%S")))
        self.spinBox_end_hour.setValue(int(frequentTime.strftime("%H")))
        self.spinBox_end_minute.setValue(int(frequentTime.strftime("%M")))
        self.spinBox_end_second.setValue(int(frequentTime.strftime("%S")))

    def downloadDLP(self, MainWindow):
        global dlpCalledBefore
        global df
        global orderedDf
        startSec = self.spinBox_start_second.value()
        startMin = self.spinBox_start_minute.value()
        startHour = self.spinBox_start_hour.value()
        endSec = self.spinBox_end_second.value()
        endMin = self.spinBox_end_minute.value()
        endHour = self.spinBox_end_hour.value()
        start = time(startHour, startMin, startSec)
        end = time(endHour, endMin, endSec)
        os.system(
            f"""yt-dlp \\
             --download-sections "*{start}-{end}" \\
             -o "./output/{start}-{end}.mp4" \\
             -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" \\
             {info["URL"]} &
            """
        )
        tempdf = df[start < df["timestamp"]]
        tempdf = tempdf[end > df["timestamp"]]
        df = pd.concat([df, tempdf, tempdf]).drop_duplicates(keep=False)
        orderedDf = df.sort_values("averaged", ascending=False)
        orderedDf = orderedDf.reset_index(drop=True)
        dlpCalledBefore = True

    def openInMPV(self, MainWindow):
        startSec = self.spinBox_start_second.value()
        startMin = self.spinBox_start_minute.value()
        startHour = self.spinBox_start_hour.value()
        endSec = self.spinBox_end_second.value()
        endMin = self.spinBox_end_minute.value()
        endHour = self.spinBox_end_hour.value()
        start = time(startHour, startMin, startSec)
        end = time(endHour, endMin, endSec)
        os.system(
            f"""mpv \\
             --start={start}\\
             --end={end}\\
             {info["URL"]} &
            """
        )

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(471, 234)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 0, 460, 182))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.mainLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.mainLayout.setContentsMargins(0, 0, 0, 0)
        self.mainLayout.setObjectName("mainLayout")
        self.leftLayout = QtWidgets.QGridLayout()
        self.leftLayout.setObjectName("leftLayout")
        self.label_peak_time = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_peak_time.setObjectName("label_peak_time")
        self.leftLayout.addWidget(self.label_peak_time, 1, 0, 1, 1)
        self.label_end_time = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_end_time.setObjectName("label_end_time")
        self.leftLayout.addWidget(self.label_end_time, 4, 0, 1, 1)
        self.label_start_time = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_start_time.setObjectName("label_start_time")
        self.leftLayout.addWidget(self.label_start_time, 3, 0, 1, 1)
        self.label_nth_frequent = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_nth_frequent.setObjectName("label_nth_frequent")
        self.leftLayout.addWidget(self.label_nth_frequent, 0, 0, 1, 1)
        self.startTimeLayout = QtWidgets.QGridLayout()
        self.startTimeLayout.setObjectName("startTimeLayout")
        self.label_start_time_hour = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_start_time_hour.setObjectName("label_start_time_hour")
        self.startTimeLayout.addWidget(self.label_start_time_hour, 0, 0, 1, 1)
        self.label_start_time_second = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_start_time_second.setObjectName("label_start_time_second")
        self.startTimeLayout.addWidget(self.label_start_time_second, 0, 2, 1, 1)
        self.spinBox_start_hour = QtWidgets.QSpinBox(self.horizontalLayoutWidget)
        self.spinBox_start_hour.setMaximum(69)
        self.spinBox_start_hour.setObjectName("spinBox_start_hour")
        self.startTimeLayout.addWidget(self.spinBox_start_hour, 1, 0, 1, 1)
        self.spinBox_start_minute = QtWidgets.QSpinBox(self.horizontalLayoutWidget)
        self.spinBox_start_minute.setMaximum(59)
        self.spinBox_start_minute.setObjectName("spinBox_start_minute")
        self.startTimeLayout.addWidget(self.spinBox_start_minute, 1, 1, 1, 1)
        self.spinBox_start_second = QtWidgets.QSpinBox(self.horizontalLayoutWidget)
        self.spinBox_start_second.setMaximum(59)
        self.spinBox_start_second.setObjectName("spinBox_start_second")
        self.startTimeLayout.addWidget(self.spinBox_start_second, 1, 2, 1, 1)
        self.label_start_time_minute = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_start_time_minute.setObjectName("label_start_time_minute")
        self.startTimeLayout.addWidget(self.label_start_time_minute, 0, 1, 1, 1)
        self.leftLayout.addLayout(self.startTimeLayout, 3, 1, 1, 1)
        self.label_time = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_time.setObjectName("label_time")
        self.leftLayout.addWidget(self.label_time, 1, 1, 1, 1)
        self.endTimeLayout = QtWidgets.QGridLayout()
        self.endTimeLayout.setObjectName("endTimeLayout")
        self.spinBox_end_minute = QtWidgets.QSpinBox(self.horizontalLayoutWidget)
        self.spinBox_end_minute.setMaximum(59)
        self.spinBox_end_minute.setObjectName("spinBox_end_minute")
        self.endTimeLayout.addWidget(self.spinBox_end_minute, 1, 1, 1, 1)
        self.spinBox_end_hour = QtWidgets.QSpinBox(self.horizontalLayoutWidget)
        self.spinBox_end_hour.setMaximum(69)
        self.spinBox_end_hour.setObjectName("spinBox_end_hour")
        self.endTimeLayout.addWidget(self.spinBox_end_hour, 1, 0, 1, 1)
        self.label_end_time_minute = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_end_time_minute.setObjectName("label_end_time_minute")
        self.endTimeLayout.addWidget(self.label_end_time_minute, 0, 1, 1, 1)
        self.label_end_time_hour = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_end_time_hour.setObjectName("label_end_time_hour")
        self.endTimeLayout.addWidget(self.label_end_time_hour, 0, 0, 1, 1)
        self.label_end_time_second = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_end_time_second.setObjectName("label_end_time_second")
        self.endTimeLayout.addWidget(self.label_end_time_second, 0, 2, 1, 1)
        self.spinBox_end_second = QtWidgets.QSpinBox(self.horizontalLayoutWidget)
        self.spinBox_end_second.setMaximum(59)
        self.spinBox_end_second.setObjectName("spinBox_end_second")
        self.endTimeLayout.addWidget(self.spinBox_end_second, 1, 2, 1, 1)
        self.leftLayout.addLayout(self.endTimeLayout, 4, 1, 1, 1)
        self.label_number = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_number.setObjectName("label_number")
        self.leftLayout.addWidget(self.label_number, 0, 1, 1, 1)
        self.label_msg_per_sec = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_msg_per_sec.setObjectName("label_msg_per_sec")
        self.leftLayout.addWidget(self.label_msg_per_sec, 2, 0, 1, 1)
        self.label_msg_nmb = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_msg_nmb.setObjectName("label_msg_nmb")
        self.leftLayout.addWidget(self.label_msg_nmb, 2, 1, 1, 1)
        self.mainLayout.addLayout(self.leftLayout)
        self.rightLayout = QtWidgets.QVBoxLayout()
        self.rightLayout.setObjectName("rightLayout")
        self.pushButton_mpv = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_mpv.setObjectName("pushButton_mpv")
        self.rightLayout.addWidget(self.pushButton_mpv)
        self.pushButton_yt_dlp = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_yt_dlp.setObjectName("pushButton_yt_dlp")
        self.rightLayout.addWidget(self.pushButton_yt_dlp)
        self.pushButton_next = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_next.setObjectName("pushButton_next")
        self.rightLayout.addWidget(self.pushButton_next)
        self.pushButton_close = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_close.setObjectName("pushButton_close")
        self.rightLayout.addWidget(self.pushButton_close)
        self.mainLayout.addLayout(self.rightLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 471, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.pushButton_close.pressed.connect(QtWidgets.qApp.quit)
        self.pushButton_mpv.pressed.connect(lambda: self.openInMPV(MainWindow))
        self.pushButton_next.pressed.connect(lambda: self.NextFrequent(MainWindow))
        self.pushButton_yt_dlp.pressed.connect(lambda: self.downloadDLP(MainWindow))
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_peak_time.setText(_translate("MainWindow", "Peak Time"))
        self.label_end_time.setText(_translate("MainWindow", "End Time"))
        self.label_start_time.setText(_translate("MainWindow", "Start Time"))
        self.label_nth_frequent.setText(_translate("MainWindow", "Nth Most Frequent"))
        self.label_start_time_hour.setText(_translate("MainWindow", "Hour"))
        self.label_start_time_second.setText(_translate("MainWindow", "Second"))
        self.label_start_time_minute.setText(_translate("MainWindow", "Minute"))
        self.label_time.setText(_translate("MainWindow", "Time"))
        self.label_end_time_minute.setText(_translate("MainWindow", "Minute"))
        self.label_end_time_hour.setText(_translate("MainWindow", "Hour"))
        self.label_end_time_second.setText(_translate("MainWindow", "Second"))
        self.label_number.setText(_translate("MainWindow", "Number"))
        self.label_msg_per_sec.setText(_translate("MainWindow", "Msg per sec (avg)"))
        self.label_msg_nmb.setText(_translate("MainWindow", "Msg"))
        self.pushButton_mpv.setText(_translate("MainWindow", "Open in MPV"))
        self.pushButton_yt_dlp.setText(_translate("MainWindow", "Download with yt-dlp"))
        self.pushButton_next.setText(_translate("MainWindow", "Next Most Frequent"))
        self.pushButton_close.setText(_translate("MainWindow", "Close"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
